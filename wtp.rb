# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Wtp < Formula
  desc "Worktree Plus - Enhanced worktree management with automated setup and hooks"
  homepage "https://github.com/satococoa/wtp"
  version "2.2.2"
  license "MIT"

  depends_on "git"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/satococoa/wtp/releases/download/v2.2.2/wtp_2.2.2_Darwin_arm64.tar.gz", using: CurlDownloadStrategy
      sha256 "6fc289028fec38d07ce066b94bc539538e7c76e08e44a31d94b5794067f5beb1"

      def install
        bin.install "wtp"

        (bash_completion/"wtp").write <<~'EOS'
          # wtp lazy shell-init for bash (installed via Homebrew)
          _wtp_lazy_init() {
            if [[ -z "${WTP_SHELL_INIT_DONE:-}" ]]; then
              local __wtp_init __wtp_status
              __wtp_init="$(command wtp shell-init bash 2>/dev/null)"
              __wtp_status=$?
              if [[ $__wtp_status -ne 0 || -z "$__wtp_init" ]]; then
                __wtp_init="$(command wtp completion bash 2>/dev/null)"
                __wtp_status=$?
              fi
              if [[ $__wtp_status -ne 0 || -z "$__wtp_init" ]]; then
                return 124
              fi

              eval "$__wtp_init"
              export WTP_SHELL_INIT_DONE=1
            fi

            if declare -F __wtp_bash_autocomplete >/dev/null 2>&1; then
              __wtp_bash_autocomplete "$@"
            elif declare -F _wtp >/dev/null 2>&1; then
              _wtp "$@"
            fi
          }

          complete -o bashdefault -o default -o nospace -F _wtp_lazy_init wtp
        EOS

        (zsh_completion/"_wtp").write <<~'EOS'
          #compdef wtp

          _wtp_lazy_init() {
            if [[ -z ${WTP_SHELL_INIT_DONE-} ]]; then
              local __wtp_init __wtp_status
              __wtp_init="$(command wtp shell-init zsh 2>/dev/null)"
              __wtp_status=$?
              if [[ $__wtp_status -ne 0 || -z "$__wtp_init" ]]; then
                __wtp_init="$(command wtp completion zsh 2>/dev/null)"
                __wtp_status=$?
              fi
              if [[ $__wtp_status -ne 0 || -z "$__wtp_init" ]]; then
                return 1
              fi

              eval "$__wtp_init"
              export WTP_SHELL_INIT_DONE=1
            fi

            if typeset -f _wtp >/dev/null 2>&1; then
              _wtp "$@"
            fi
          }

          compdef _wtp_lazy_init wtp
        EOS

        (fish_completion/"wtp.fish").write <<~'EOS'
          function __wtp_lazy_setup --on-event fish_prompt --description 'Lazy shell-init for wtp (Homebrew)'
              functions -e __wtp_lazy_setup

              if not set -q WTP_SHELL_INIT_DONE
                  command wtp shell-init fish ^/dev/null | source
                  set -l __wtp_status $status
                  if test $__wtp_status -ne 0
                      command wtp completion fish ^/dev/null | source
                      set __wtp_status $status
                  end
                  if test $__wtp_status -ne 0
                      return
                  end

                  set -gx WTP_SHELL_INIT_DONE 1
              end
          end
        EOS
      end
    end
  end

  on_linux do
    if Hardware::CPU.intel?
      if Hardware::CPU.is_64_bit?
        url "https://github.com/satococoa/wtp/releases/download/v2.2.2/wtp_2.2.2_Linux_x86_64.tar.gz", using: CurlDownloadStrategy
        sha256 "e24b240f0b66327335b2ff41ba3f14b6defca117c1d18d60f89d7d5c9c081d11"

        def install
          bin.install "wtp"

          (bash_completion/"wtp").write <<~'EOS'
            # wtp lazy shell-init for bash (installed via Homebrew)
            _wtp_lazy_init() {
              if [[ -z "${WTP_SHELL_INIT_DONE:-}" ]]; then
                local __wtp_init __wtp_status
                __wtp_init="$(command wtp shell-init bash 2>/dev/null)"
                __wtp_status=$?
                if [[ $__wtp_status -ne 0 || -z "$__wtp_init" ]]; then
                  __wtp_init="$(command wtp completion bash 2>/dev/null)"
                  __wtp_status=$?
                fi
                if [[ $__wtp_status -ne 0 || -z "$__wtp_init" ]]; then
                  return 124
                fi

                eval "$__wtp_init"
                export WTP_SHELL_INIT_DONE=1
              fi

              if declare -F __wtp_bash_autocomplete >/dev/null 2>&1; then
                __wtp_bash_autocomplete "$@"
              elif declare -F _wtp >/dev/null 2>&1; then
                _wtp "$@"
              fi
            }

            complete -o bashdefault -o default -o nospace -F _wtp_lazy_init wtp
          EOS

          (zsh_completion/"_wtp").write <<~'EOS'
            #compdef wtp

            _wtp_lazy_init() {
              if [[ -z ${WTP_SHELL_INIT_DONE-} ]]; then
                local __wtp_init __wtp_status
                __wtp_init="$(command wtp shell-init zsh 2>/dev/null)"
                __wtp_status=$?
                if [[ $__wtp_status -ne 0 || -z "$__wtp_init" ]]; then
                  __wtp_init="$(command wtp completion zsh 2>/dev/null)"
                  __wtp_status=$?
                fi
                if [[ $__wtp_status -ne 0 || -z "$__wtp_init" ]]; then
                  return 1
                fi

                eval "$__wtp_init"
                export WTP_SHELL_INIT_DONE=1
              fi

              if typeset -f _wtp >/dev/null 2>&1; then
                _wtp "$@"
              fi
            }

            compdef _wtp_lazy_init wtp
          EOS

          (fish_completion/"wtp.fish").write <<~'EOS'
            function __wtp_lazy_setup --on-event fish_prompt --description 'Lazy shell-init for wtp (Homebrew)'
                functions -e __wtp_lazy_setup

                if not set -q WTP_SHELL_INIT_DONE
                    command wtp shell-init fish ^/dev/null | source
                    set -l __wtp_status $status
                    if test $__wtp_status -ne 0
                        command wtp completion fish ^/dev/null | source
                        set __wtp_status $status
                    end
                    if test $__wtp_status -ne 0
                        return
                    end

                    set -gx WTP_SHELL_INIT_DONE 1
                end
            end
          EOS
        end
      end
    end
    if Hardware::CPU.arm?
      if Hardware::CPU.is_64_bit?
        url "https://github.com/satococoa/wtp/releases/download/v2.2.2/wtp_2.2.2_Linux_arm64.tar.gz", using: CurlDownloadStrategy
        sha256 "cccc0439ad4ee4afb887435a84bf693c93fbdb8786b8052eefb913e4cf87c141"

        def install
          bin.install "wtp"

          (bash_completion/"wtp").write <<~'EOS'
            # wtp lazy shell-init for bash (installed via Homebrew)
            _wtp_lazy_init() {
              if [[ -z "${WTP_SHELL_INIT_DONE:-}" ]]; then
                local __wtp_init __wtp_status
                __wtp_init="$(command wtp shell-init bash 2>/dev/null)"
                __wtp_status=$?
                if [[ $__wtp_status -ne 0 || -z "$__wtp_init" ]]; then
                  __wtp_init="$(command wtp completion bash 2>/dev/null)"
                  __wtp_status=$?
                fi
                if [[ $__wtp_status -ne 0 || -z "$__wtp_init" ]]; then
                  return 124
                fi

                eval "$__wtp_init"
                export WTP_SHELL_INIT_DONE=1
              fi

              if declare -F __wtp_bash_autocomplete >/dev/null 2>&1; then
                __wtp_bash_autocomplete "$@"
              elif declare -F _wtp >/dev/null 2>&1; then
                _wtp "$@"
              fi
            }

            complete -o bashdefault -o default -o nospace -F _wtp_lazy_init wtp
          EOS

          (zsh_completion/"_wtp").write <<~'EOS'
            #compdef wtp

            _wtp_lazy_init() {
              if [[ -z ${WTP_SHELL_INIT_DONE-} ]]; then
                local __wtp_init __wtp_status
                __wtp_init="$(command wtp shell-init zsh 2>/dev/null)"
                __wtp_status=$?
                if [[ $__wtp_status -ne 0 || -z "$__wtp_init" ]]; then
                  __wtp_init="$(command wtp completion zsh 2>/dev/null)"
                  __wtp_status=$?
                fi
                if [[ $__wtp_status -ne 0 || -z "$__wtp_init" ]]; then
                  return 1
                fi

                eval "$__wtp_init"
                export WTP_SHELL_INIT_DONE=1
              fi

              if typeset -f _wtp >/dev/null 2>&1; then
                _wtp "$@"
              fi
            }

            compdef _wtp_lazy_init wtp
          EOS

          (fish_completion/"wtp.fish").write <<~'EOS'
            function __wtp_lazy_setup --on-event fish_prompt --description 'Lazy shell-init for wtp (Homebrew)'
                functions -e __wtp_lazy_setup

                if not set -q WTP_SHELL_INIT_DONE
                    command wtp shell-init fish ^/dev/null | source
                    set -l __wtp_status $status
                    if test $__wtp_status -ne 0
                        command wtp completion fish ^/dev/null | source
                        set __wtp_status $status
                    end
                    if test $__wtp_status -ne 0
                        return
                    end

                    set -gx WTP_SHELL_INIT_DONE 1
                end
            end
          EOS
        end
      end
    end
  end

  test do
    system "#{bin}/wtp", "--help"
  end
end
